
/**
 * EA License Application - Google Apps Script Template (JWT版) - SANKEY統合版
 *
 * 設定手順:
 * 1. 下記の CONFIG セクションに設定値を入力
 * 2. Google FormでonFormSubmitトリガーを設定
 * 3. フォーム送信時に自動でWebhookが実行されます
 * 4. 管理画面からテスト実行可能
 *
 * ⚠️ Google Form連携の場合:
 * - フォームの「回答」タブから「スプレッドシートにリンク」を設定
 * - このスクリプトは自動的にフォーム連携スプレッドシートを検出します
 * - ライセンス情報は同じスプレッドシート内の別シートに記録されます
 * - フォーム回答シート: 「フォームの回答 1」（自動生成）
 * - ライセンス記録シート: 「EA_LICENSES」（このスクリプトが作成）
 * - 申請記録シート: 「EA_APPLICATIONS」（このスクリプトが作成）
 */

// ============================================
// 設定セクション(ここを編集してください)
// ============================================
var CONFIG = {

    WEBHOOK_URL: '{{{webhookUrl}}}',
    TEST_NOTIFICATION_URL: '{{{testNotificationUrl}}}',
    RESULT_NOTIFICATION_URL: '{{{resultNotificationUrl}}}',
    USER_ID: '{{{userId}}}',
    JWT_SECRET: '{{{jwtSecret}}}',

    // フォームの項目名(実際のフォーム項目に合わせて調整)
    FORM_FIELDS: {
        EA_NAME: "EA",
        ACCOUNT_NUMBER: "口座番号",
        BROKER: "ブローカー",
        EMAIL: "メールアドレス",
        X_ACCOUNT: "ユーザー名",
        // スプレッドシートID（オプション）: 記録先のスプレッドシートID
        // 未設定の場合は新規作成されます
        SPREADSHEET_ID: ""
    }
};

// ============================================
// 新機能: SANKEY連携機能（冪等性対応版）
// ============================================

/**
 * 統合テスト用のダミー申請送信
 * 🔧 修正: testIdは必須パラメータ（冪等性保証）
 */
function triggerIntegrationTest(testId) {
    try {
        console.log('統合テストを開始します...', { testId: testId });

        if (!validateConfig()) {
            console.error('❌ 設定が不正です');
            return {success: false, error: '設定が不正です'};
        }

        // 🔧 修正: testIdは必須（サーバー側から提供される）
        if (!testId) {
            console.error('❌ testIdが必要です（サーバー側から提供される必要があります）');
            return {success: false, error: 'testId parameter is required'};
        }

        // 🔧 修正: 動的生成を削除、サーバー側testIdのみ使用
        var integrationTestId = testId;

        // 統合テスト用ダミーデータ（サーバー側と完全一致）
        var integrationTestData = {
            eaName: "Integration Test EA",
            accountNumber: "INTEGRATION_TEST_123456",
            broker: "Test Broker",
            email: "integration-test@sankey.trade",
            xAccount: "@integration_test",
            integrationTestId: integrationTestId
        };

        console.log('統合テスト用ダミーデータでWebhook送信を実行します...', {
            integrationTestId: integrationTestId
        });

        var result = sendWebhook(integrationTestData);

        if (result.success) {
            console.log('✅ 統合テスト用Webhook送信成功');

            return {
                success: true,
                message: 'Integration test application submitted successfully',
                applicationId: result.response.data ? result.response.data.applicationId : 'N/A',
                testId: integrationTestId,
                nextStep: 'Integration test will be automatically approved'
            };
        } else {
            console.log('❌ 統合テスト用Webhook送信失敗');
            return {
                success: false,
                error: 'Integration test webhook failed: ' + result.error
            };
        }

    } catch (error) {
        console.error('❌ 統合テスト中にエラー:', error);
        return {success: false, error: error.toString()};
    }
}

/**
 * 接続テスト（SANKEY連携テスト）
 */
function testConnection() {
    try {
        console.log('接続テストを開始します...');

        // 設定値検証
        if (!validateConfig()) {
            console.error('❌ 設定が不正です');
            return {success: false, error: '設定が不正です'};
        }

        // JWT作成テスト（認証確認）
        console.log('JWT認証テストを実行します...');
        try {
            var testPayload = {
                userId: CONFIG.USER_ID,
                timestamp: new Date().toISOString(),
                testType: 'connection_test'
            };
            var testJwt = createJWT(testPayload);
            console.log('✅ JWT作成成功');
        } catch (jwtError) {
            console.error('❌ JWT作成失敗:', jwtError);

            // JWT作成失敗をSANKEYに通知
            notifyTestSuccess({
                success: false,
                timestamp: new Date().toISOString(),
                details: 'JWT creation failed: ' + jwtError.toString()
            });

            return {
                success: false,
                error: 'JWT creation failed: ' + jwtError.toString()
            };
        }

        // SANKEYにテスト成功を通知
        console.log('SANKEY認証確認を実行します...');

        var notificationResult = notifyTestSuccess({
            success: true,
            timestamp: new Date().toISOString(),
            details: 'GAS connection test completed - SANKEY configuration verified',
            gasProjectId: getGasProjectId()
        });

        if (notificationResult.success) {
            console.log('✅ 接続テスト完了');
            return {
                success: true,
                message: 'Connection test completed - SANKEY configuration verified',
                notificationResult: notificationResult.response
            };
        } else {
            console.log('❌ SANKEY通知送信失敗');
            return {
                success: false,
                error: 'SANKEY notification failed: ' + notificationResult.error
            };
        }

    } catch (error) {
        console.error('❌ テスト中にエラー:', error);

        // エラーもSANKEYに通知
        try {
            notifyTestSuccess({
                success: false,
                timestamp: new Date().toISOString(),
                details: 'GAS connection test error: ' + error.toString()
            });
        } catch (notifyError) {
            console.error('通知送信もエラー:', notifyError);
        }

        return {success: false, error: error.toString()};
    }
}

/**
 * SANKEYにテスト結果を通知
 */
function notifyTestSuccess(testResult) {
    try {
        if (!CONFIG.TEST_NOTIFICATION_URL || CONFIG.TEST_NOTIFICATION_URL === '') {
            console.error('TEST_NOTIFICATION_URL が設定されていません');
            return {success: false, error: 'TEST_NOTIFICATION_URL not configured'};
        }

        var notificationData = {
            userId: CONFIG.USER_ID,
            testResult: testResult
        };

        console.log('テスト結果通知を送信中...', {
            testSuccess: testResult.success,
            userId: CONFIG.USER_ID
        });

        var response = UrlFetchApp.fetch(CONFIG.TEST_NOTIFICATION_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            payload: JSON.stringify(notificationData),
            muteHttpExceptions: true
        });

        var responseCode = response.getResponseCode();
        var responseText = response.getContentText();

        console.log('テスト結果通知レスポンス:', {
            code: responseCode,
            body: responseText
        });

        if (responseCode === 200) {
            try {
                return {
                    success: true,
                    response: JSON.parse(responseText)
                };
            } catch (parseError) {
                return {
                    success: true,
                    response: {message: responseText}
                };
            }
        } else {
            return {
                success: false,
                error: 'HTTP ' + responseCode + ': ' + responseText
            };
        }

    } catch (error) {
        console.error('テスト結果通知エラー:', error);
        return {
            success: false,
            error: error.toString()
        };
    }
}

// ============================================
// SANKEY通知受信機能
// ============================================

/**
 * SANKEYからの通知処理
 */
function onSankeyNotification(notificationData) {
    try {
        console.log('SANKEY通知処理を開始します...');

        // 必須パラメータの検証
        if (!notificationData.userId || !notificationData.applicationId || !notificationData.licenseId) {
            return {
                success: false,
                error: 'Missing required parameters: userId, applicationId, licenseId'
            };
        }

        var { userId, applicationId, licenseId, licenseValue, testId } = notificationData;

        console.log('ライセンス通知詳細:', {
            userId: userId,
            applicationId: applicationId,
            licenseId: licenseId,
            isIntegrationTest: !!testId
        });

        // ライセンス情報をスプレッドシートに記録（エラーが発生しても処理継続）
        try {
            recordLicenseToSpreadsheet({
                userId: userId,
                applicationId: applicationId,
                licenseId: licenseId,
                licenseValue: licenseValue,
                testId: testId,
                receivedAt: new Date()
            });
        } catch (recordError) {
            console.error('スプレッドシート記録エラー（処理は継続）:', recordError);
        }

        // 統合テスト時の特別処理
        if (testId) {
            console.log('統合テスト完了通知を送信します...', { testId: testId });

            var completionResult = notifyIntegrationTestCompletion({
                userId: userId,
                testId: testId,
                licenseId: licenseId,
                applicationId: applicationId,
                success: true,
                timestamp: new Date().toISOString(),
                details: 'Integration test completed successfully - License received via GAS webhook'
            });

            if (completionResult.success) {
                console.log('✅ 統合テスト完了通知送信成功');
                return {
                    success: true,
                    message: 'License notification received and integration test completed',
                    integrationTestResult: completionResult.response
                };
            } else {
                console.log('⚠️ ライセンス受信成功、但し完了通知送信失敗');
                return {
                    success: true,
                    message: 'License notification received but integration test completion failed',
                    warning: completionResult.error
                };
            }
        } else {
            // 通常のライセンス通知
            console.log('✅ ライセンス通知受信完了');
            return {
                success: true,
                message: 'License notification received successfully'
            };
        }

    } catch (error) {
        console.error('❌ SANKEY通知処理エラー:', error);
        return {
            success: false,
            error: error.toString()
        };
    }
}

/**
 * ライセンス情報をスプレッドシートに記録
 */
function recordLicenseToSpreadsheet(licenseData) {
    try {
        var sheet = getOrCreateSheet('EA_LICENSES');

        // シートが取得できない場合はスキップ
        if (!sheet) {
            console.warn('スプレッドシートへの記録をスキップします');
            return;
        }

        // ヘッダー行の確認・作成
        if (sheet.getLastRow() === 0) {
            sheet.getRange(1, 1, 1, 7).setValues([[
                '受信日時', 'ユーザーID', '申請ID', 'ライセンスID', 'ライセンス値', 'テストID', '備考'
            ]]);
        }

        // データ行の追加
        var timestamp = licenseData.receivedAt.toLocaleString('ja-JP');
        var remark = licenseData.testId ? '統合テスト' : '本番';

        sheet.appendRow([
            timestamp,
            licenseData.userId,
            licenseData.applicationId,
            licenseData.licenseId,
            licenseData.licenseValue || '',
            licenseData.testId || '',
            remark
        ]);

        console.log('ライセンス情報をスプレッドシートに記録完了:', {
            sheet: sheet.getName(),
            row: sheet.getLastRow(),
            licenseId: licenseData.licenseId,
            isTest: !!licenseData.testId
        });

    } catch (error) {
        console.error('ライセンス記録エラー:', error);
        // エラーが発生しても処理は継続
    }
}

/**
 * 統合テスト完了をSANKEYに通知
 */
function notifyIntegrationTestCompletion(completionData) {
    try {
        var completionUrl = CONFIG.RESULT_NOTIFICATION_URL.replace('/integration/result/notification', '/integration/test/complete');

        var notificationPayload = {
            userId: completionData.userId,
            testId: completionData.testId,
            licenseId: completionData.licenseId,
            applicationId: completionData.applicationId,
            testResult: {
                success: completionData.success,
                timestamp: completionData.timestamp,
                details: completionData.details
            }
        };

        console.log('統合テスト完了通知を送信中...', {
            url: completionUrl,
            testId: completionData.testId
        });

        var response = UrlFetchApp.fetch(completionUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            payload: JSON.stringify(notificationPayload),
            muteHttpExceptions: true
        });

        var responseCode = response.getResponseCode();
        var responseText = response.getContentText();

        console.log('統合テスト完了通知レスポンス:', {
            code: responseCode,
            body: responseText
        });

        if (responseCode === 200) {
            try {
                return {
                    success: true,
                    response: JSON.parse(responseText)
                };
            } catch (parseError) {
                return {
                    success: true,
                    response: { message: responseText }
                };
            }
        } else {
            return {
                success: false,
                error: 'HTTP ' + responseCode + ': ' + responseText
            };
        }

    } catch (error) {
        console.error('統合テスト完了通知エラー:', error);
        return {
            success: false,
            error: error.toString()
        };
    }
}

// ============================================
// 共通機能
// ============================================

/**
 * フォーム送信時の処理（トリガー用）
 */
function onFormSubmit(e) {
    try {
        console.log('フォーム送信を検知しました');

        // フォームの回答データを取得
        const formData = {
            eaName: e.namedValues[CONFIG.FORM_FIELDS.EA_NAME]?.[0] || '',
            accountNumber: e.namedValues[CONFIG.FORM_FIELDS.ACCOUNT_NUMBER]?.[0] || '',
            broker: e.namedValues[CONFIG.FORM_FIELDS.BROKER]?.[0] || '',
            email: e.namedValues[CONFIG.FORM_FIELDS.EMAIL]?.[0] || '',
            xAccount: e.namedValues[CONFIG.FORM_FIELDS.X_ACCOUNT]?.[0] || ''
        };

        console.log('フォームデータ:', formData);

        // Webhookを送信
        const result = sendWebhook(formData);

        // 結果を記録
        recordToSpreadsheet(formData, result.response);

        if (result.success) {
            console.log('✅ フォーム処理成功');
        } else {
            console.error('❌ フォーム処理失敗:', result.error);
        }

    } catch (error) {
        console.error('❌ onFormSubmitエラー:', error);
    }
}

/**
 * Webhookの送信(JWT版)
 */
function sendWebhook(formData) {
    try {
        var jwt = createJWT(formData);

        console.log('JWT署名済みリクエストデータ準備完了', {
            jwtLength: jwt.length,
            userId: CONFIG.USER_ID
        });

        var response = UrlFetchApp.fetch(CONFIG.WEBHOOK_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            payload: JSON.stringify({
                userId: CONFIG.USER_ID,
                data: jwt,
                iv: "",
                hmac: "jwt-signed",
                method: "JWT"
            }),
            muteHttpExceptions: true
        });

        var responseCode = response.getResponseCode();
        var responseText = response.getContentText();

        console.log('レスポンス:', {
            code: responseCode,
            body: responseText
        });

        if (responseCode === 200) {
            try {
                return {
                    success: true,
                    response: JSON.parse(responseText)
                };
            } catch (parseError) {
                return {
                    success: true,
                    response: {message: responseText}
                };
            }
        } else if (responseCode === 503) {
            console.log('サービス一時利用不可 - 3秒後にリトライします');
            Utilities.sleep(3000);
            return sendWebhook(formData);
        } else {
            return {
                success: false,
                error: 'HTTP ' + responseCode + ': ' + responseText
            };
        }

    } catch (error) {
        console.error('sendWebhook エラー:', error);
        return {
            success: false,
            error: error.toString()
        };
    }
}

/**
 * JWTの作成（JWT_SECRETを使用）
 */
function createJWT(payload) {
    try {
        var header = {
            alg: "HS256",
            typ: "JWT"
        };

        var jwtPayload = {
            data: payload,
            iat: Math.floor(Date.now() / 1000),
            exp: Math.floor(Date.now() / 1000) + 300,
            userId: CONFIG.USER_ID
        };

        var headerEncoded = base64UrlEncode(JSON.stringify(header));
        var payloadEncoded = base64UrlEncode(JSON.stringify(jwtPayload));
        var signatureInput = headerEncoded + "." + payloadEncoded;

        var keyBytes = Utilities.base64Decode(CONFIG.JWT_SECRET);
        var signatureInputBytes = Utilities.newBlob(signatureInput).getBytes();
        var signatureBytes = Utilities.computeHmacSha256Signature(signatureInputBytes, keyBytes);
        var signature = base64UrlEncode(signatureBytes);

        return signatureInput + "." + signature;

    } catch (error) {
        console.error('JWT作成エラー:', error);
        throw new Error('JWT作成に失敗しました: ' + error.toString());
    }
}

/**
 * Base64URL エンコード(JWT用)
 */
function base64UrlEncode(data) {
    var base64 = Utilities.base64Encode(data);
    return base64
        .replace(/\+/g, '-')
        .replace(/\//g, '_')
        .replace(/=/g, '');
}

/**
 * GASプロジェクトID取得
 */
function getGasProjectId() {
    try {
        return ScriptApp.getScriptId();
    } catch (error) {
        console.error('GASプロジェクトID取得エラー:', error);
        return '';
    }
}

/**
 * 設定値の検証
 */
function validateConfig() {
    var issues = [];

    if (!CONFIG.WEBHOOK_URL || CONFIG.WEBHOOK_URL.indexOf('your-api') !== -1) {
        issues.push('WEBHOOK_URL が設定されていません');
    }

    if (!CONFIG.USER_ID || CONFIG.USER_ID.indexOf('xxxx') !== -1) {
        issues.push('USER_ID が設定されていません');
    }

    if (!CONFIG.JWT_SECRET || CONFIG.JWT_SECRET.indexOf('your-') !== -1) {
        issues.push('JWT_SECRET が設定されていません');
    }

    if (issues.length > 0) {
        console.error('❌ 設定エラー:', issues);
        return false;
    }

    console.log('✅ 設定は正常です');
    return true;
}

/**
 * スプレッドシートに申請データを記録
 */
function recordToSpreadsheet(formData, responseData) {
    try {
        var sheet = getOrCreateSheet('EA_APPLICATIONS');

        // シートが取得できない場合はスキップ
        if (!sheet) {
            console.warn('スプレッドシートへの記録をスキップします');
            return;
        }

        // ヘッダー行の確認・作成
        if (sheet.getLastRow() === 0) {
            sheet.getRange(1, 1, 1, 8).setValues([[
                '申請日時', 'EA名', 'ブローカー', '口座番号', 'メール', 'Xアカウント', '申請ID', '一時URL'
            ]]);
        }

        // データ行の追加
        var timestamp = new Date().toLocaleString('ja-JP');
        var applicationId = '';
        var temporaryUrl = '';

        if (responseData && responseData.data) {
            applicationId = responseData.data.applicationId || '';
            temporaryUrl = responseData.data.temporaryUrl || '';
        }

        sheet.appendRow([
            timestamp,
            formData.eaName,
            formData.broker,
            formData.accountNumber,
            formData.email,
            formData.xAccount,
            applicationId,
            temporaryUrl
        ]);

        console.log('スプレッドシートに記録完了:', {
            sheet: sheet.getName(),
            row: sheet.getLastRow(),
            applicationId: applicationId
        });

    } catch (error) {
        console.error('スプレッドシート記録エラー:', error);
        // エラーが発生しても処理は継続
    }
}

/**
 * シート取得または作成（Google Form連携版）
 */
function getOrCreateSheet(sheetName) {
    try {
        let spreadsheet = null;

        // 方法1: Formに紐づいたスプレッドシートを取得（推奨）
        try {
            // アクティブなフォームを取得
            const form = FormApp.getActiveForm();
            if (form) {
                // フォームの送信先スプレッドシートIDを取得
                const destinationId = form.getDestinationId();
                if (destinationId) {
                    spreadsheet = SpreadsheetApp.openById(destinationId);
                    console.log('フォームに紐づいたスプレッドシートを使用:', destinationId);
                } else {
                    console.log('フォームにスプレッドシートが紐づいていません');
                }
            }
        } catch (formError) {
            console.log('フォーム連携スプレッドシート取得エラー:', formError);
        }

        // 方法2: 手動で設定されたスプレッドシートIDを使用
        if (!spreadsheet && CONFIG.FORM_FIELDS.SPREADSHEET_ID && CONFIG.FORM_FIELDS.SPREADSHEET_ID.trim() !== '') {
            try {
                spreadsheet = SpreadsheetApp.openById(CONFIG.FORM_FIELDS.SPREADSHEET_ID.trim());
                console.log('設定されたスプレッドシートIDを使用:', CONFIG.FORM_FIELDS.SPREADSHEET_ID);
            } catch (openError) {
                console.error('スプレッドシートIDが無効です:', openError);
            }
        }

        // 方法3: 現在のスプレッドシートを取得（スクリプトエディタから実行時）
        if (!spreadsheet) {
            try {
                spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
                if (spreadsheet) {
                    console.log('アクティブなスプレッドシートを使用');
                }
            } catch (activeError) {
                console.log('アクティブスプレッドシート取得エラー:', activeError);
            }
        }

        // 方法4: 新しいスプレッドシートを作成（最終手段）
        if (!spreadsheet) {
            try {
                console.log('新しいスプレッドシートを作成します...');
                spreadsheet = SpreadsheetApp.create('EA License Integration Test Data - ' + new Date().toISOString());

                console.log('✅ 新規スプレッドシート作成成功:', {
                    spreadsheetId: spreadsheet.getId(),
                    url: spreadsheet.getUrl(),
                    message: 'フォームの回答の送信先をこのスプレッドシートに設定することを推奨します'
                });
            } catch (createError) {
                console.error('スプレッドシート作成エラー:', createError);
                return null;
            }
        }

        // シートを取得または作成
        if (spreadsheet) {
            let sheet = null;

            // 既存のシートを探す
            try {
                sheet = spreadsheet.getSheetByName(sheetName);
                if (sheet) {
                    console.log('既存のシートを使用:', sheetName);
                }
            } catch (e) {
                console.log('シート検索エラー:', e);
            }

            // シートが見つからない場合は作成
            if (!sheet) {
                try {
                    sheet = spreadsheet.insertSheet(sheetName);
                    console.log('新しいシートを作成しました:', sheetName);
                } catch (insertError) {
                    console.error('シート作成エラー:', insertError);

                    // フォームの回答シートがある場合は、それとは別のシートを作成
                    try {
                        const sheets = spreadsheet.getSheets();
                        if (sheets && sheets.length > 0) {
                            // 最後のシートの後に新規シート追加
                            const lastIndex = sheets.length;
                            sheet = spreadsheet.insertSheet(sheetName, lastIndex);
                            console.log('シートを最後に追加しました:', sheetName);
                        }
                    } catch (fallbackError) {
                        console.error('シート追加のフォールバックも失敗:', fallbackError);
                        return null;
                    }
                }
            }

            return sheet;
        }

        return null;

    } catch (error) {
        console.error('getOrCreateSheet完全エラー:', error);
        return null;
    }
}

/**
 * WebアプリのPOSTリクエスト処理（修正版）
 * - SANKEYからの通知受信
 * - 統合テスト実行（testId必須）
 */
function doPost(e) {
    try {
        console.log('POSTリクエストを受信しました');

        if (!e.postData || !e.postData.contents) {
            return ContentService.createTextOutput(JSON.stringify({
                success: false,
                error: 'No POST data received'
            })).setMimeType(ContentService.MimeType.JSON);
        }

        // リクエストデータを解析
        var requestData = JSON.parse(e.postData.contents);
        console.log('受信データ:', requestData);

        // 🔧 修正: 統合テスト処理（testId必須検証）
        if (requestData.action === 'integration_test') {
            console.log('統合テスト実行リクエストを受信:', {
                testId: requestData.testId,
                timestamp: requestData.timestamp
            });

            // 🔧 testIdの必須検証を追加
            if (!requestData.testId) {
                return ContentService.createTextOutput(JSON.stringify({
                    success: false,
                    error: 'testId is required for integration test'
                })).setMimeType(ContentService.MimeType.JSON);
            }

            // 統合テスト実行（サーバー側testIdを厳密に使用）
            var result = triggerIntegrationTest(requestData.testId);

            return ContentService.createTextOutput(JSON.stringify(result))
                .setMimeType(ContentService.MimeType.JSON);
        }

        // 既存: SANKEYからの通知処理
        console.log('SANKEYからの通知として処理します');
        var result = onSankeyNotification(requestData);
        
        return ContentService.createTextOutput(JSON.stringify(result))
            .setMimeType(ContentService.MimeType.JSON);
            
    } catch (error) {
        console.error('doPost処理エラー:', error);
        return ContentService.createTextOutput(JSON.stringify({
            success: false,
            error: error.toString()
        })).setMimeType(ContentService.MimeType.JSON);
    }
}